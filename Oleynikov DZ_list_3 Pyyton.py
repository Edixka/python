# Задача 1. Страшный код
# Вашему другу, который тоже начал изучать Python, преподаватель дал такую задачу:
# есть три списка — основной и два побочных. В основном лежат элементы [1, 5, 3],
# а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно. 


# Используя знания о методах списков, а также о стиле программирования,
# помогите другу переписать программу. Не используйте дополнительные списки.
# Результат работы программы:
# Кол-во цифр 5 при первом объединении: 3
# Кол-во цифр 3 при втором объединении: 4
# Итоговый список: [1, 3, 1, 1, 1, 3, 1, 5, 3, 3]


# a = [1, 5, 3]
# b = [1, 5, 1, 5]
# c = [1, 3, 1, 5, 3, 3]
#
# a.append(b)
# count_fail = a.count(5)
# print('Колличество цифр 5 при первом объединении:', count_fail)
# for _ in range(count_fail):
#     a.remove(5)
#
# a.append(c)
# count_feile = a.count(3)
# print('Кол-во цифр 3 при втором объединении:', count_feile)
#
# print('Итоговый список:', a)

#################################################################################

# Задача 2. Шеренга
# Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены по росту
# (по возрастанию): в одном классе от 160 см до 176 см с шагом 2,
# во втором классе — от 162 см до 180 см с шагом 3.
# Спустя какое-то время два класса объединяют в одну шеренгу и
# тоже выстраивают их по возрастанию.
# Напишите программу, которая генерирует списки роста для каждого в классе,
# затем объединяет их в один список и сортирует его в порядке возрастания.
# Выведите отсортированный список на экран.


# class_1 = list(range(160, 176, 2))
# class_2 = list(range(162, 180, 3))
#
# class_1.extend(class_2)
#
# for i_cur in range(len(class_1) - 1):
#     for i in range(len(class_1) - 1):
#         if class_1[i] > class_1[i + 1]:
#             class_1[i], class_1[i + 1] = class_1[i + 1], class_1[i]
#
# print('Отсортированный список:', class_1)


###########################################################################

# Задача 3. Детали
# В базе данных магазина всякой всячины хранится список названий деталей и их стоимостей:
# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100],
#         ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200], ['седло', 2700]]
# Напишите программу, которая запрашивает у пользователя деталь, считает их количество,
# а также общую стоимость.

#
# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300],
#         ['педаль', 100], ['седло', 1500], ['рама', 12000],
#         ['обод', 2000], ['шатун', 200], ['седло', 2700]]
#
# det_count = 0
# det_coun = 0
# detal = input('Название детали: ')
#
# for i in range(len(shop)):
#     if shop[i][0] == detal.lower():
#         det_count += 1
#         det_cun = shop[i][1]
# print()
# if det_count > 0:
#     print('Кол-во детали: ', det_count)
#     print('Сумма:', det_coun)
#
# else:
#     print('Детали нет в наличии:')

#################################################

# Задача 4. Симметричная последовательность
# Последовательность чисел называется симметричной,
# если она одинаково читается как слева направо,
# так и справа налево. Например, следующие последовательности являются симметричными:
#
# 1 2 3 4 5 4 3 2 1
# 1 2 1 2 2 1 2 1
#
# Пользователь вводит последовательность из N чисел.
# Напишите программу, которая определяет, какое минимальное количество
# и каких чисел надо приписать в конец этой последовательности, чтобы она стала симметричной.
#  

# Пример 1:
# Последовательность: [1, 2, 1, 2, 2]
# Нужно приписать чисел: 3
# Сами числа: [1, 2, 1]
#
# Пример 2:
# Последовательность: [1, 2, 3, 4, 5]
# Нужно приписать чисел: 4
# Сами числа: [4, 3, 2, 1]


# num = int(input('Введите числа: '))
# arr = []
#
# for i in range(num):
#     arr.append(int(input('Число: ')))
#
# counter = 0
# while arr != arr[::-1]:
#     arr.insert(num, arr[counter])
#     counter += 1
# print('Нужно прописать чисел:', counter)
# print('Сами числа:', arr[:counter][::-1])


###########################################################



# Задача 5. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют
# рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’,
# ‘Богемская рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
#
# Илья на сайте в первый раз. Он хочет зарегистрироваться и
# сразу добавить часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм.
# Если он есть в перечне, то добавляется в список любимых.
# Если его нет, то выводится ошибка. В конце выведите весь список любимых фильмов.

#
# def lower_list(lst):
#     new_lst = []
#     for i in range(len(lst)):
#         new_lst.append(lst[i].lower())
#     return new_lst
#
#
# def search_movie(lst, mov):
#     result = -1
#     for i in range(len(lst)):
#         if lst[i] == mov:
#             result = i
#             break
#     return result
#
#
# def main():
#     films = ['Крепкий орешек', 'Назад в будущее', 'Таксист',
#              'Леон', 'Богемская рапсодия', 'Город грехов',
#              'Мементо', 'Отступники', 'Деревня']
#     films_lc = lower_list(films)
#     favorite_films = []
#     number = int(input('Сколько фильмов хотите добавить? '))
#     for i in range(number):
#         movie = input('Введите название фильма: ')
#         index_movie = search_movie(films_lc, movie.lower())
#         if index_movie > -1:
#             favorite_films.append(films[index_movie])
#         else:
#             print('Ошибка: фильма', movie, 'у нас нет :(')
#     fav_mov = ''
#     for c in range(len(favorite_films)):
#         fav_mov += favorite_films[c]
#         if c < len(favorite_films) - 1:
#             fav_mov += ', '
#     print('Ваш список любимых фильмов:', fav_mov)
#
#
# if __name__ == '__main__':
#     main()

#######################################################################


# Задача 6. Файлы
# В одной IT-компании существует негласный закон об именовании текстовых документов:
# Название файла не должно начинаться на один из специальных символов: @№$%^&*().
# Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла
# и проверяет его по этим правилам.

# import string
#
# extensions = ('.txt', '.docx')
# file_name = input('Название файла: ').lower()
# err = 0
# correct_ext = False
#
# if file_name[0] in string.punctuation:
#     print('Ошибка: название начинается на один из специальных символов')
#     err += 1
#
# if err == 0:
#     if file_name.endswith(extensions):
#         correct_ext = True
#
#     if correct_ext:
#         print('Файл назван верно.')
#     else:
#         print('Ошибка: неверное расширение файла. Ожидалось .txt или .docx')

##################################################################
#
# Задача 7. Сжатие
# С увеличением объёма данных возникла потребность в сжатии этих данных
# без потери важной информации. Для этого было придумано кодирование,
# которое осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот
# символ и количество его повторений в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным
# алгоритмом и выводит закодированную последовательность на экран.
# Кодирование должно учитывать регистр символов


 # def compress(str_txt):
#     str_len = len(str_txt)
#     result = ''
#
#     if str_len > 0:
#         i = 0
#         while i < str_len:
#             counter = 0
#             curr_char = str_txt[i:i + 1]
#             while i < str_len and str_txt[i] == curr_char:
#                 i += 1
#                 counter += 1
#             result += curr_char + str(counter)
#     return result
#
# text = input('Введите строку: ')
#
# print(compress(text))

################################################

# Задача 8. IP-адрес
# При написании клиент-серверного приложения часто приходится работать
# с IP-адресами. IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до 255,
# разделённых точками.


 # ip = input('Введите IP: ')
# split_ip = ip.split('.')
#
# if len(split_ip) < 4:
#     print('Адрес - это четыре числа, разделённые точками')
# else:
#     numeric = 0
#     out_of_range = 0
#     for x in split_ip:
#         if x.isdigit():
#             numeric += 1
#             if int(x) > 255:
#                 out_of_range += 1
#                 print(x, 'превышает 255')
#         else:
#             print(x, '- не целое число')
#     if out_of_range == 0 and numeric == 4:
#         print('IP-адрес корректен')